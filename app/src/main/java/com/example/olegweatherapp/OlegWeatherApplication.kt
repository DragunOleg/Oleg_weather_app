package com.example.olegweatherappimport android.app.Applicationimport android.content.Contextimport androidx.hilt.work.HiltWorkerFactoryimport androidx.work.*import com.example.olegweatherapp.work.RefreshDataWorkerimport dagger.hilt.android.HiltAndroidAppimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchimport timber.log.Timberimport java.util.concurrent.TimeUnitimport javax.inject.Inject@HiltAndroidAppclass OlegWeatherApplication : Application(), Configuration.Provider {    //needed for hilt work manager    @Inject    lateinit var workerFactory: HiltWorkerFactory    private val applicationScope = CoroutineScope(Dispatchers.Default)    /**     * onCreate is called before the first screen is shown to the user.     *     * Use it to setup any background tasks, running expensive setup operations in a background     * thread to avoid delaying app start.     */    override fun onCreate() {        super.onCreate()        delayedInit()    }    private fun delayedInit() {        applicationScope.launch {            Timber.plant(Timber.DebugTree())            val sharedPref = getSharedPreferences("settings", Context.MODE_PRIVATE)            if (sharedPref != null) {                val period = sharedPref.getInt("updatePeriod", 60)                setupRecurringWork(period, applicationContext)            } else {                setupRecurringWork(60, applicationContext)            }        }    }    //needed for hilt work manager    override fun getWorkManagerConfiguration(): Configuration =            Configuration.Builder()                    .setWorkerFactory(workerFactory)                    .build()}/** * it is here so we can call it from settings fragment */fun setupRecurringWork(minutes: Int, context: Context) {    val constraints = Constraints.Builder()            .setRequiredNetworkType(NetworkType.CONNECTED)            .build()    val repeatingRequest =            PeriodicWorkRequestBuilder<RefreshDataWorker>(minutes.toLong(), TimeUnit.MINUTES)                    .setConstraints(constraints)                    .build()    Timber.d("forecast: WorkManager: Periodic Work request for sync is scheduled, with ${minutes.toLong()} minutes")    WorkManager.getInstance(context).enqueueUniquePeriodicWork(            RefreshDataWorker.WORK_NAME,            ExistingPeriodicWorkPolicy.REPLACE,            repeatingRequest    )}